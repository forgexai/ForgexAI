# ForgexAI Frontend - Cursor Rules

## Project Overview
This is a Next.js 14+ project with TypeScript, using the App Router architecture. The project follows modern React patterns with server components as the default and client components only when necessary.

## Architecture Principles

### Component Structure
- **Server Components First**: Use server components by default in `page.tsx` and throughout the app
- **Client Components Only When Needed**: Use `"use client"` directive only for:
  - Interactive elements (forms, buttons with onClick)
  - Browser APIs (localStorage, window, document)
  - State management (useState, useEffect, custom hooks)
  - Event handlers and user interactions

### File Organization
- **Maximum 150 lines per file**: Split components when they exceed this limit
- **Single Responsibility**: Each component should have one clear purpose
- **Co-location**: Keep related files close together (components, hooks, types)
- **Barrel Exports**: Use index.ts files for clean imports

### Component Guidelines

#### Server Components (Default)
```tsx
// ✅ Good - Server component
export default function UserProfile({ userId }: { userId: string }) {
  const user = await getUser(userId);
  return <div>{user.name}</div>;
}
```

#### Client Components (When Necessary)
```tsx
'use client';

// ✅ Good - Client component for interactivity
export function InteractiveButton() {
  const [count, setCount] = useState(0);
  return <button onClick={() => setCount(c => c + 1)}>{count}</button>;
}
```

### File Structure Standards
```
app/                    # Next.js App Router
  globals.css          # Global styles
  layout.tsx           # Root layout (Server Component)
  page.tsx             # Home page (Server Component)
  (routes)/            # Route groups for organization
    dashboard/
      page.tsx
      layout.tsx
    auth/
      login/
        page.tsx
      signup/
        page.tsx

components/
  ui/                  # shadcn/ui components (existing)
    button.tsx
    card.tsx
    input.tsx
    # ... all existing UI components
  features/            # Feature-specific components
    auth/
      LoginForm.tsx
      SignupForm.tsx
    dashboard/
      DashboardHeader.tsx
      StatsCard.tsx
  layout/              # Layout components
    Header.tsx
    Footer.tsx
    Sidebar.tsx
  common/              # Shared components
    LoadingSpinner.tsx
    ErrorBoundary.tsx

lib/
  providers/           # Context providers (existing)
    ClientProvider.tsx
  utils.ts             # Utility functions (existing)
  api/                 # API utilities
    client.ts
    server.ts
  types/               # TypeScript type definitions
    index.ts
    auth.ts
    user.ts

hooks/                 # Custom React hooks (existing)
  use-mobile.ts        # Existing mobile detection hook
  use-auth.ts          # Authentication hook
  use-api.ts           # API data fetching hook

public/                # Static assets (existing)
  *.svg               # SVG icons
  images/             # Image assets
```

### Code Quality Rules

#### TypeScript
- **Strict Types**: Use explicit types, avoid `any`
- **Interface over Type**: Prefer interfaces for object shapes
- **Generic Components**: Use generics for reusable components
- **Props Validation**: Always define prop types

#### React Patterns
- **Custom Hooks**: Extract logic into custom hooks
- **Compound Components**: Use for complex UI patterns
- **Render Props**: When appropriate for flexibility
- **Error Boundaries**: Wrap components that might fail

#### Performance
- **Lazy Loading**: Use dynamic imports for heavy components
- **Memoization**: Use React.memo, useMemo, useCallback judiciously
- **Image Optimization**: Use Next.js Image component
- **Bundle Splitting**: Keep client components minimal

### File Naming Conventions
- **PascalCase**: Components (`UserProfile.tsx`)
- **camelCase**: Hooks (`useUserData.ts`)
- **kebab-case**: Pages and routes (`user-settings/page.tsx`)
- **UPPER_CASE**: Constants (`API_ENDPOINTS.ts`)

### Import/Export Standards
```tsx
// ✅ Good - Named exports for components
export function UserCard({ user }: UserCardProps) { ... }

// ✅ Good - Default export for pages
export default function HomePage() { ... }

// ✅ Good - Barrel exports
export { UserCard } from './UserCard';
export { UserList } from './UserList';
```

### State Management
- **Server State**: Use server components and server actions
- **Client State**: useState for simple state, Zustand for complex state
- **URL State**: Use searchParams and router for navigation state
- **Form State**: Use react-hook-form for forms

### Styling Guidelines
- **Tailwind CSS**: Primary styling method
- **CSS Modules**: For component-specific styles
- **Styled Components**: Avoid unless necessary
- **Design System**: Use shadcn/ui components as base

### Error Handling
- **Error Boundaries**: Wrap feature sections
- **Try-Catch**: In server actions and API routes
- **Loading States**: Always show loading indicators
- **Error States**: Provide meaningful error messages

### Security Best Practices
- **Input Validation**: Validate all user inputs
- **XSS Prevention**: Sanitize user content
- **CSRF Protection**: Use proper CSRF tokens
- **Environment Variables**: Never commit secrets


## Development Workflow

### Before Writing Code
1. Identify if component needs to be client or server
2. Plan component structure and props interface
3. Consider reusability and composition
4. Check if existing components can be extended

### During Development
1. Write TypeScript interfaces first
2. Implement server component logic
3. Add client interactivity only when needed
4. Keep components under 150 lines
5. Extract reusable logic into custom hooks

### After Implementation
1. Test component in isolation
2. Verify server/client boundary is correct
3. Check bundle size impact
4. Ensure accessibility standards
5. Update documentation if needed

## Common Patterns

### Server Component with Client Interactivity
```tsx
// page.tsx (Server Component)
import { InteractiveSection } from '@/components/features/InteractiveSection';

export default function HomePage() {
  return (
    <div>
      <h1>Server Rendered Content</h1>
      <InteractiveSection />
    </div>
  );
}
```

### Feature Component Structure
```tsx

interface UserProfileProps {
  userId: string;
}

export function UserProfile({ userId }: UserProfileProps) {
  return (
    <div className="user-profile">
      {/* Server component content */}
    </div>
  );
}

'use client';

export function UserProfileActions() {
}
```

### Custom Hook Pattern
```tsx
// hooks/useUserData.ts
export function useUserData(userId: string) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
  }, [userId]);
  
  return { user, loading };
}
```

Remember: Server components are the default, client components are the exception. Keep components small, focused, and reusable. Always consider the user experience and performance implications of your architectural decisions. DO NOT add comments or console logs until specifically asked to do so. Consoles can be added in catch statements but no where other than that
